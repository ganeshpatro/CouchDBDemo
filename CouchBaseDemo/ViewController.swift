//
//  ViewController.swift
//  CouchBaseDemo
//
//  Created by Ganesh Patro on 10/20/17.
//  Copyright Â© 2017 Ganesh Patro. All rights reserved.
//

import UIKit
import Pods_CouchBaseDemo

class ViewController: UIViewController {

    @IBOutlet weak var tfRollNumber: UITextField!
    
    @IBOutlet weak var tfName: UITextField!
    
    @IBOutlet weak var tfBranch: UITextField!
    
    
    @IBAction func onClickOfSave(_ sender: Any) {
        self.save()
    }

    // Create a manager
    let manager = CBLManager.sharedInstance()
    var database: CBLDatabase!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.

        do {
            // Create or open the database named app
            database = try manager.databaseNamed("app")
        } catch {
            print("Database creation or opening failed")
            return
        }
        
        // Create replicators to push & pull changes to & from Sync Gateway
        let url = URL(string: "http://34.212.115.252:4984/db")!
        let push = database.createPushReplication(url)
        let pull = database.createPullReplication(url)
        push.continuous = true
        pull.continuous = true

        // Start replicators
        push.start()
        pull.start()
        
        NotificationCenter.default.addObserver(forName: NSNotification.Name.cblDatabaseChange, object: database, queue: nil) {
            (notification) -> Void in
            if let changes = notification.userInfo!["changes"] as? [CBLDatabaseChange] {
                for change in changes {
                    NSLog("\n --- Document '%@' changed. --- \n", change.documentID)
                    let document = self.database.existingDocument(withID: change.documentID)
                    let name = document?.property(forKey: "name")
                    let rollno = document?.property(forKey: "roll_no")
                    let branch = document?.property(forKey: "branch")
                    
                    self.tfName.text = name as? String
                    self.tfRollNumber.text = rollno as? String
                    self.tfBranch.text = branch as? String
                    
                }
            }
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func save() {
        let properties = ["name": tfName.text,
                          "roll_no": tfRollNumber.text,
                          "branch":tfBranch.text,
                           ]
        
        // Create a new document
        let document: CBLDocument = database.document(withID: tfRollNumber.text!)!

        do {
            if let doc = database.existingDocument(withID: tfRollNumber.text!) {
                try document.update({ (revision) -> Bool in
                    // Save the document to the database
                    revision["name"] = self.tfName.text
                    revision["branch"] = self.tfBranch.text
                    return true
                })
            } else {
               try document.putProperties(properties)
            }
        } catch {
            print("Can't save document in database")
            return
        }
        
        // Log the document ID (generated by the database)
        // and properties
        print("Document ID :: \(document.documentID)")
       // print("Learning \(document.property(forKey: "sdk")!)")
    }
}

